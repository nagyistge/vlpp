#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
from datetime import datetime
import os
import shutil
import sys

from vlpp.lib import utils, validation
from vlpp.vlpp import main_workflow


def get_arguments():

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
            """,
            epilog="""

            Documentation at https://github.com/villeneuvelab/vlpp
            Please report any issues there

            """)

    parser.add_argument(
            '-c', '--config_file',
            required=True,
            help='Path to a json config file',
            )

    return parser.parse_args()


def main():

    # Arguments
    args = get_arguments()
    argsValidated = validation.Validation(args)

    # Main workflow
    wf = main_workflow(argsValidated.config_dict)

    # Graph
    #graph2use: 'orig', 'hierarchical' (default), 'flat', 'exec', 'colored'
    wf.write_graph(graph2use='colored')

    # Run
    now = datetime.now().strftime("%y%m%d-%H%M%S")
    wf.run()

    '''
    config_run = {
            "plugin": "SGEGraph",
            "plugin_args": {
                "qsub_args": "-l procs=12 -l walltime=1:00:00 -A yai-974-aa"
                }
            }
    wf.run(plugin=PLUGIN_NAME, plugin_args=ARGS_DICT)
    wf.run(**config_run)
    '''

    # Cleaning
    output_dir = argsValidated.config_dict['arguments']['output_dir']
    log_dir = os.path.join(output_dir, "log")
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    #pypeline.log
    shutil.move(
            os.path.join(output_dir, "pypeline.log"),
            os.path.join(log_dir, "pypeline-{}.log".format(now))
            )

    #pypeline.lock
    os.remove(os.path.join(output_dir, "pypeline.lock"))

    #graph
    graph_file = os.path.join(
            argsValidated.config_dict['arguments']['working_dir'],
            utils.PIPELINENAME, 'graph.dot.png')
    shutil.copy2(
            graph_file, os.path.join(log_dir, 'graph-{}.dot.png'.format(now)))

    #config
    utils.write_json(
            argsValidated.config_dict,
            os.path.join(log_dir, "config-{}.json".format(now))
            )

    """
    import subprocess
    try:
        wf.run()
    finally:
        shutil.rmtree(tmpDir, ignore_errors=True)
        suprocess.call( ['rsync', '-a', myscratch, myhome])
        shutil.rmtree(myscratch)
    """

    return 0


if __name__ == '__main__':
    sys.exit(main())

