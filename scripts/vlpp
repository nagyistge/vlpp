#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
import os
import shutil
import sys

APP_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(APP_DIR)

from lib import utils, validation
import workflows.main


def get_arguments():
    """
    """
    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
            Consult the documentation at https://github.com/villeneuvelab/vlpp
            """,
            epilog="""

            Please report bugs on github

            Ex:
                vlpp -i /home/chris/Projets/Sylvia/data/sourcedata/B12-303 -o
            """)

    parser.add_argument(
            '-c', '--config_file',
            required=True,
            help='Path to a json config file. The default will be load if not specified.',
            )

    """
    parser.add_argument(
            '-p', '--pet_dir',
            required=False,
            help='PET data directory of one subject.',
            )

    parser.add_argument(
            '-f', '--fs_dir',
            required=False,
            help='Freesurfer data directory of one subject.',
            )

    parser.add_argument(
            '-s', '--subject_id',
            required=True,
            help='PET data directory of one subject.',
            )

    parser.add_argument(
            '-o', '--output_dir',
            required=False,
            help='Output data directory.',
            )

    parser.add_argument(
            '-w', '--working_dir',
            required=False,
            help='Working data directory.',
            )
    """

    parser.add_argument(
            '-d', '--debug',
            required=False, action='store_true',
            help='Nipype debug mode.',
            )

    return parser.parse_args()


def main():

    # Arguments
    args = get_arguments()
    argsValidated = validation.Validation(args)
    utils.print_json(
            argsValidated.config_dict['arguments'],
            "Pipeline arguments:",
            )

    # Main workflow
    main_wf = workflows.main.main_wf(argsValidated.config_dict)

    # Graph
    #graph2use: 'orig', 'hierarchical' (default), 'flat', 'exec', 'colored'
    main_wf.write_graph(graph2use='colored')
    src = os.path.join(
            argsValidated.config_dict['arguments']['working_dir'],
            utils.__PIPELINENAME__,
            'graph.dot.png')
    shutil.copy2(
            src,
            argsValidated.config_dict['arguments']['output_dir'])

    # Run
    main_wf.run()

    config_run = {
            "plugin": "SGEGraph",
            "plugin_args": {
                "qsub_args": "-l procs=12 -l walltime=1:00:00 -A yai-974-aa"
                }
            }
    #main_wf.run(plugin=PLUGIN_NAME, plugin_args=ARGS_DICT)
    #main_wf.run(**config_run)

    """
    try:
        myfancypipeline()
    finally:
        shutil.rmtree(tmpcrap, ignore_errors=True)
        suprocess.call( ['rsync', '-a', myscratch, myhome])
        shutil.rmtree(myscratch)
    """

    return 0


if __name__ == '__main__':
    sys.exit(main())

